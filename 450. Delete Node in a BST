class Solution {
    public TreeNode deleteNode(TreeNode root, int key) {
        if(root==null) return root;
        if(root.val==key) return helper(root);
        TreeNode curr=root;
        while(root!=null){           
            if(root.val>key){
                if(root.left!=null && root.left.val==key){
                    root.left=helper(root.left);
                    break;
                }
                else{
                    root=root.left;
                }
            }
            else{
                if(root.right!=null && root.right.val==key){
                    root.right=helper(root.right);
                    break;
                }
                else{
                    root=root.right;
                }
            }
        }
        return curr;
    }
    public TreeNode helper(TreeNode root){
        if(root.left==null){
            return root.right;
        }
        else if(root.right==null){
            return root.left;
        }
        TreeNode rightChild=root.right;
        TreeNode leftChild=findLeft(root.left);
        leftChild.right=rightChild;
        return root.left;
    }
    public TreeNode findLeft(TreeNode root){
        if(root.right==null){
            return root;
        }
        return findLeft(root.right);
    }
}

/* Here's the explaination
1.Base Cases: If the root is null, return null. If the key matches the value of the root, call the helper function to delete the root.
2.Traversal: Traverse through the BST to find the node to delete. If the key is smaller than the current node's value, move left; otherwise, move right.
3.Deletion: When the key is found:
Call the helper function to delete the node. If the node has no children or only one child, return the non-null child.
If the node has both children, find the leftmost node in its right subtree.
Replace the deleted node with this leftmost node, and connect its right subtree to the deleted node's original right subtree.
4.Helper Function: Finds the leftmost node in a given subtree.
This approach ensures the BST property is maintained after deletion.*/
