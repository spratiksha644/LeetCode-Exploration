//Solution for the given problem

class Solution {
    public List<Double> averageOfLevels(TreeNode root) {
        List<Double> list=new ArrayList<>();
        Queue<TreeNode> q=new LinkedList<>();
        if(root==null) return list;
        double avg=root.val;
        q.add(root);
        while(!q.isEmpty()){
            avg=0;
            int level=q.size();
            
            for(int i=0;i<level;i++){
                TreeNode curr=q.remove();
                avg+=curr.val;
                if(curr.left!=null){
                    q.add(curr.left);
                }
                if(curr.right!=null){
                    q.add(curr.right);
                }
            }
            list.add(avg/level);
        }
        return list;
    }
}


/*
This Java solution computes the average value of nodes at each level of a binary tree. 
It uses a queue for level order traversal, processing each level iteratively.
At each level, it calculates the average by summing up the values of nodes and dividing by the number of nodes in the level.
It then adds this average to the result list.
This approach ensures that each level is processed separately, allowing for the computation of the average value for each level
*/
. Finally, it returns the list containing the average values of each level in the binary tree.
