//Solution for the given problem

class pair{
    TreeNode node;
    int num;
    pair(TreeNode _node,int _num){
        node=_node;
        num=_num;
    }
}
class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        if(root==null) return 0;
        int ans=0;
        Queue<pair> q=new LinkedList<>();
        q.add(new pair(root,0));
        while(!q.isEmpty()){
            int l=q.size();
            int min=q.peek().num;
            int first=0;
            int last=0;
            for(int i=0;i<l;i++){
                int id=q.peek().num-min;
                TreeNode curr=q.peek().node;
                q.poll();
                if(i==0) first=id;
                if(i==l-1) last=id;
                if(curr.left!=null){
                    q.add(new pair(curr.left,id*2+1));
                }
                if(curr.right!=null){
                    q.add(new pair(curr.right,id*2+2));
                }
            }
            ans=Math.max(last-first+1,ans);
        }
        return ans;
    }
}


/*
We define a class pair to hold a TreeNode and its corresponding index within the level. 
The widthOfBinaryTree function takes a TreeNode root and returns the width of the binary tree, which is the maximum width among all levels.
We initialize the ans variable to store the maximum width and create a queue q to perform level order traversal. 
We add the root node along with its index (initially 0) to the queue.

We enter a loop that continues until the queue is empty. In each iteration:
We get the size of the current level.
We record the minimum index of the current level.
We initialize variables first and last to store the index of the first and last nodes in the current level.

We iterate through each node in the current level:
We calculate the relative index of the node (id) by subtracting the minimum index.
We retrieve the node and its index from the queue.
We update first and last if the current node is the first or last node in the level.
We enqueue the left child with an index calculated using 2 * id + 1.
We enqueue the right child with an index calculated using 2 * id + 2.
Finally, we update ans with the maximum width observed so far, which is last - first + 1.
This approach efficiently computes the width of the binary tree by considering the relative positions of nodes within each level.
*/
