//Solution for above problem

class Solution {
    private ListNode getMid(ListNode head){
        ListNode slow=head;
        ListNode fast=head.next;
        while(fast!=null && fast.next!=null){
            fast=fast.next.next;
            slow=slow.next;
        }
        return slow;
    }
    ListNode reverse(ListNode head){
        ListNode curr=head;
        ListNode prev=null;
        ListNode next=null;
        while(curr!=null){
            next=curr.next;
            curr.next=prev;
            prev=curr;
            curr=next;
        }
        return prev;
    }
    public boolean isPalindrome(ListNode head) {
        if(head==null || head.next==null){
           return true;
        }
        ListNode middle=getMid(head);
        ListNode temp=middle.next;
        middle.next=reverse(temp);
        ListNode head1=head;
        ListNode head2=middle.next;
        while(head2!=null){
            if(head1.val!=head2.val){
                return false;
            }
            head1=head1.next;
            head2=head2.next;

        }
        return true;
    }
}

/*This Java code defines a Solution class with a method isPalindrome to determine if a linked list is a palindrome.
The code uses a two-step process. First, it finds the middle of the linked list using the getMid method, 
and then it reverses the second half of the list using the reverse method.
It then compares the values of the first half (head1) with the reversed second half (head2).
If all values match, the linked list is considered a palindrome, and the method returns true; otherwise, it returns false.
The algorithm has a time complexity of O(n) and a space complexity of O(1).*/
