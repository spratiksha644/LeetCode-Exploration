//Recursive approach
class Solution {
    public void invert(TreeNode root){
        if(root==null) return;
        if(root.left==null && root.right==null){
            return;
        }
        TreeNode temp=root.left;
        root.left=root.right;
        root.right=temp;
        invertTree(root.left);
        invertTree(root.right);
        }
    public TreeNode invertTree(TreeNode root) {
        if(root==null){
            return null;
        }
        invert(root);
        return root;
    }
}


/*
The provided Java solution aims to invert a binary tree using a recursive approach.
The invertTree function is the entry point, which calls the invert helper function. 
This invert function performs the actual inversion by swapping the left and right child nodes recursively. 
If the current node is null or a leaf node, the function returns without any modification. 
After inverting the left and right subtrees, it returns the modified root node of the inverted tree.
*/


//Iterative approach
class Solution {
    public TreeNode invertTree(TreeNode root) {
        if(root==null){
            return null;
        }
        Queue<TreeNode> q=new LinkedList<>();
        q.add(root);
        while(!q.isEmpty()){
            TreeNode curr=q.poll();
            if(curr.left!=null){
                q.add(curr.left);
            }
            if(curr.right!=null){
                q.add(curr.right);
            }
            TreeNode temp=curr.left;
            curr.left=curr.right;
            curr.right=temp;
            }
        return root;
    }
}

/*
The given Java solution aims to invert a binary tree using an iterative approach.
It utilizes a queue to perform a level-order traversal of the tree.
At each level, it swaps the left and right child nodes of each node iteratively.
This process continues until all nodes have been processed.
Finally, it returns the root of the inverted tree. 
This approach ensures that each node's children are swapped appropriately, leading to the inversion of the entire binary tree.
*/
