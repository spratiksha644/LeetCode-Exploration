//Solution for the given problem from geeksforgeeks

class Pair<A,B>{
    A first;
    B second;
    
    public Pair(A first,B second){
        this.first=first;
        this.second=second;
    }
}

class Solution
{
    public ArrayList <Integer> bottomView(Node root)
    {
       ArrayList<Integer> ans=new ArrayList<>();
       Map<Integer,Integer> mp=new TreeMap<>();
       Queue<Pair<Node,Integer>> q=new LinkedList<>();
       if(root==null) return ans;
       q.add(new Pair(root,0));
       while(!q.isEmpty()){
           Pair<Node,Integer> a=q.remove();
           int val=a.second;
           Node temp=a.first;
           mp.put(val,temp.data);
           if(temp.left!=null){
               q.add(new Pair(temp.left,val-1));
           }
           if(temp.right!=null){
               q.add(new Pair(temp.right,val+1));
           }
       }
       for(int i:mp.values()){
           ans.add(i);
       }
       return ans;
    }
}


/*
This Java solution aims to find the bottom view of a binary tree. 
Similar to the top view solution, it utilizes a level order traversal (BFS) approach along with a TreeMap to store the horizontal distance (hd) of each node from the root.
The TreeMap ensures that the nodes are sorted based on their horizontal distance.
For each node encountered during the traversal, its value is updated in the map corresponding to its horizontal distance.
Since the TreeMap automatically sorts the nodes based on their keys (horizontal distance), the last occurrence of each horizontal distance will represent the bottom view nodes.
The solution returns an ArrayList containing the values of the nodes visible from the bottom view in the binary tree, ordered from left to right.
*/
