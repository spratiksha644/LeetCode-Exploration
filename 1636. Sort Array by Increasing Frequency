//Solution for the given problem

class Solution {
    public int[] frequencySort(int[] nums) {
        int[] arr=new int[nums.length];
        Map<Integer,Integer> mp=new HashMap<>();
        for(int num : nums){
            mp.put(num,mp.getOrDefault(num,0)+1);
        } 
        //custom comparator
        PriorityQueue<Map.Entry<Integer,Integer>>minPQ=new PriorityQueue<>((a,b)->a.getValue().equals(b.getValue()) ? b.getKey() - a.getKey() : a.getValue() - b.getValue());
        for(Map.Entry<Integer,Integer> entry:mp.entrySet()){
            minPQ.add(entry);
        }
        int i=0;
        while(!minPQ.isEmpty()){
            Map.Entry<Integer,Integer> entry=minPQ.poll();
            int n=entry.getKey();
            int f=entry.getValue();
            for(int j=0;j<f;j++){
                arr[i]=n;
                i++;
            }
        }
        return arr;
    }
}

/*This Java solution sorts an array of integers based on their frequency.
It first creates a map to store the frequency of each number in the input array. 
Then, it uses a priority queue to sort the entries of this map based on their values (frequency).
If two entries have the same frequency, it compares their keys (numbers). 
Finally, it constructs the sorted array by adding each number to the array according to its frequency, iterating over the priority queue.
The result is an array where numbers with higher frequency appear first, and if two numbers have the same frequency, the smaller number comes first.
*/
