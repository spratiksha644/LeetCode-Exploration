//Solution for the given problem

class Solution {
    public String removeDuplicates(String s) {
        StringBuilder sb=new StringBuilder();
        Stack<Character> st=new Stack<>();
        for(int i=0;i<s.length();i++){
            if(st.size()==0){
                st.push(s.charAt(i));
            }
            else if(st.peek()!=s.charAt(i)){
                st.push(s.charAt(i));
            }
            else if(st.peek()==s.charAt(i)){
                st.pop();
            }
        }
        while(st.size()>0){
            sb.append(st.peek());
            st.pop();
        }
        return sb.reverse().toString(); 
    }
}

/*The Solution class contains a removeDuplicates method that removes adjacent duplicates from a given string s.
It uses a Stack (st) to track non-duplicate characters.
The algorithm iterates through the string, pushing characters onto the stack if it's empty or if the current character is different from the top of the stack. 
If the current character matches the top of the stack, it pops the stack to eliminate the adjacent duplicate.
Finally, the non-duplicate characters are reversed and concatenated to form the resulting string. */
